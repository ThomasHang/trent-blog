import{g as e,j as v,c as i,e as u,a as m,d,F as b,h as g,i as f,k as p,o as r,t as c}from"./app-Ba0Gw2Pi.js";import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";const w={class:"container"},x={__name:"grid.html",setup(T){const t=e("5"),n=e(),o=e([]);return v(()=>{const s=parseInt(t.value);o.value=Array.from({length:s},(a,l)=>l+1)}),(s,a)=>(r(),i("div",null,[a[4]||(a[4]=u('<h2 id="基本概念" tabindex="-1" data-v-3bdf067d><a class="header-anchor" href="#基本概念" data-v-3bdf067d><span data-v-3bdf067d>基本概念</span></a></h2><p data-v-3bdf067d>Grid 布局是二维的排版方式，一次能控制两个方向，通过将容器分成行和列，便可定义容器内元素的位置。</p><ul data-v-3bdf067d><li data-v-3bdf067d>显式网格属性 <ul data-v-3bdf067d><li data-v-3bdf067d>grid-template-rows 属性：定义每一行的行高</li><li data-v-3bdf067d>grid-template-columns 属性：定义每一列的列宽</li></ul></li><li data-v-3bdf067d>隐式网格属性 <ul data-v-3bdf067d><li data-v-3bdf067d>grid-auto-rows</li><li data-v-3bdf067d>grid-auto-columns</li><li data-v-3bdf067d>grid-auto-flow</li></ul></li><li data-v-3bdf067d>间距属性 <ul data-v-3bdf067d><li data-v-3bdf067d>grid-column-gap</li><li data-v-3bdf067d>grid-row-gap</li></ul></li></ul>',3)),m(` - grid-gap: 设置网格项之间的间隙。
- grid-template-areas: 允许通过指定命名的区域来创建布局。这可以使布局更易读和维护。 `),a[5]||(a[5]=u('<h3 id="repeat-函数" tabindex="-1" data-v-3bdf067d><a class="header-anchor" href="#repeat-函数" data-v-3bdf067d><span data-v-3bdf067d>repeat()函数</span></a></h3><p data-v-3bdf067d>如果觉得定义行高（grid-template-rows）以及列宽（grid-template-columns）的时候重复书写某个值很麻烦，那么就可以考虑使用 repeat()函数。</p><p data-v-3bdf067d>语法： repeat(<code data-v-3bdf067d>length</code>, [<code data-v-3bdf067d>value</code> | <code data-v-3bdf067d>mode</code>])</p><ul data-v-3bdf067d><li data-v-3bdf067d>参数 1length：需要重复的次数</li><li data-v-3bdf067d>参数 2[<code data-v-3bdf067d>value</code> | <code data-v-3bdf067d>mode</code>]：需要重复的值，可以是百分比、具体的值或者是某种模式</li></ul><h3 id="fr-关键字" tabindex="-1" data-v-3bdf067d><a class="header-anchor" href="#fr-关键字" data-v-3bdf067d><span data-v-3bdf067d>fr 关键字</span></a></h3><p data-v-3bdf067d>fr 表示比例，1fr 表示占 1 份。</p><h3 id="auto-fill-关键字" tabindex="-1" data-v-3bdf067d><a class="header-anchor" href="#auto-fill-关键字" data-v-3bdf067d><span data-v-3bdf067d>auto-fill 关键字</span></a></h3><p data-v-3bdf067d>有时，单元格的大小是固定的，但是容器的大小不确定。 如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用 auto-fill 关键字表示自动填充。</p>',8)),d("div",w,[(r(!0),i(b,null,g(o.value,l=>(r(),i("div",{key:l,class:"item"},c(l),1))),128))]),d("div",null,[a[2]||(a[2]=d("label",null," div数量： ",-1)),d("label",null,[f(d("input",{"onUpdate:modelValue":a[0]||(a[0]=l=>t.value=l)},null,512),[[p,t.value]])])]),d("div",null,[a[3]||(a[3]=d("label",null," repeat： ",-1)),d("label",null,[f(d("input",{"onUpdate:modelValue":a[1]||(a[1]=l=>n.value=l)},null,512),[[p,n.value]])])])]))}},_=h(x,[["__scopeId","data-v-3bdf067d"]]),k=JSON.parse('{"path":"/code/website/css/grid.html","title":"gird 布局","lang":"zh-CN","frontmatter":{"title":"gird 布局","tag":"css"},"git":{"createdTime":1700403037000,"updatedTime":1700815436000,"contributors":[{"name":"ThomasHang","username":"ThomasHang","email":"11939838031@qq.com","commits":1,"url":"https://github.com/ThomasHang"},{"name":"储天航","username":"","email":"1193983801@qq.com","commits":2}]},"readingTime":{"minutes":1.41,"words":422},"filePathRelative":"code/website/css/grid.md","excerpt":"<h2>基本概念</h2>\\n<p>Grid 布局是二维的排版方式，一次能控制两个方向，通过将容器分成行和列，便可定义容器内元素的位置。</p>\\n<ul>\\n<li>显式网格属性\\n<ul>\\n<li>grid-template-rows 属性：定义每一行的行高</li>\\n<li>grid-template-columns 属性：定义每一列的列宽</li>\\n</ul>\\n</li>\\n<li>隐式网格属性\\n<ul>\\n<li>grid-auto-rows</li>\\n<li>grid-auto-columns</li>\\n<li>grid-auto-flow</li>\\n</ul>\\n</li>\\n<li>间距属性\\n<ul>\\n<li>grid-column-gap</li>\\n<li>grid-row-gap</li>\\n</ul>\\n</li>\\n</ul>"}');export{_ as comp,k as data};
