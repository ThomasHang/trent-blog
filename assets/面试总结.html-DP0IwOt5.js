import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as l}from"./app-Ba0Gw2Pi.js";const t={};function h(k,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="面试总结" tabindex="-1"><a class="header-anchor" href="#面试总结"><span>面试总结</span></a></h1><p>中电金信</p><ol><li>class 的 hooks 的区别</li></ol><ul><li><p>概念与定义方式</p><p>Class 组件: 使用 ES6 类语法定义组件，继承自 React.Component。 必须实现 render 方法来返回 JSX。</p><p>函数组件: 使用普通的 JavaScript 函数定义组件。 函数直接返回 JSX，没有 render 方法。</p></li><li><p>状态管理 Class 组件: 使用 this.state 来管理状态。 通过 this.setState 来更新状态。</p><p>函数组件: 使用 useState Hook 来管理状态。 通过调用 setCount 来更新状态</p></li><li><p>生命周期方法 vs. Hooks Class 组件: 使用生命周期方法如 componentDidMount、componentDidUpdate 和 componentWillUnmount 来管理组件的生命周期。</p><p>函数组件（使用 Hooks）: 使用 useEffect Hook 来管理组件的生命周期。</p></li><li><p>代码简洁性 Class 组件: 由于需要管理 this 关键字、构造函数、绑定方法等，代码相对冗长。 函数组件: 代码更加简洁，函数式编程风格，使得逻辑更易读和复用。</p></li></ul><p>2、context 有没有用过？有什么缺点？</p><p>缺点 虽然 Context 在某些场景中非常有用，但它也有一些缺点：</p><ul><li><p>性能问题: 当 Context 中的数据变化时，所有消费该 Context 的组件都会重新渲染，可能导致性能问题，特别是在大型应用中。</p></li><li><p>难以调试: 由于 Context 消除了 props 传递，组件的依赖关系变得不那么明显，可能会使调试变得更加困难。</p></li><li><p>复杂性增加: 对于简单的状态管理，使用 Context 可能会引入不必要的复杂性。在这种情况下，直接使用 props 传递数据可能会更合适。</p></li></ul><p>3、 useRef 的用法</p><ul><li>基本概念 useRef 是 React 的一个内置 Hook，用于创建一个可变的引用，它不会在组件重新渲染时重置。useRef 返回一个可以存储任意值的对象，通常用于访问和操作 DOM 元素或保存任何可变值。</li></ul><p>forwardRef 允许组件使用 ref 将 DOM 节点暴露给父组件。</p><ul><li>注意事项 确保使用 forwardRef: 在函数组件中，如果你需要接收 ref，必须使用 forwardRef 来将其传递给子组件的内部 DOM 或方法。 避免过度使用: 虽然这种模式很强大，但过度使用可能会导致组件之间的耦合增加，违背 React 的组件化思想。应尽量保持组件的独立性和可复用性。</li></ul><p>useImperativeHandle 是 React 中的一个 Hook，它能让你自定义由 ref 暴露出来的句柄。</p><p>4、 useMemo 和 React memo 的用法区别</p><ul><li>useMemo 是一个 Hook，用于记忆计算开销大的值。它会在依赖项发生变化时重新计算值，否则返回缓存的值。适用于函数组件内部，用于优化计算开销大的操作。</li><li>useCallback 是一个 Hook，用于记忆函数。它返回一个记忆版本的回调函数，这个回调函数仅在依赖项发生变化时才会更新。主要用于防止在组件重新渲染时不必要地重新创建函数。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> React</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">useState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">useCallback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;react&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ChildComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">onClick</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;ChildComponent rendered&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> onClick</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">onClick</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Click me&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ParentComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">setCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> handleClick</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useCallback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Button clicked&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }, []);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ChildComponent</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> onClick</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">handleClick</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> onClick</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Increment&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Count: </span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ParentComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>React.memo 是一个高阶组件，用于记忆组件的渲染结果。它会对组件的 props 进行浅比较，只有当 props 发生变化时才重新渲染组件。适用于函数组件，防止组件在不必要的情况下重新渲染。</li></ul><p>5、</p>`,17)]))}const r=i(t,[["render",h]]),d=JSON.parse('{"path":"/code/interview/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93.html","title":"面试总结","lang":"zh-CN","frontmatter":{},"git":{"createdTime":1719936297000,"updatedTime":1719936297000,"contributors":[{"name":"ThomasHang","username":"ThomasHang","email":"11939838031@qq.com","commits":1,"url":"https://github.com/ThomasHang"}]},"readingTime":{"minutes":2.98,"words":895},"filePathRelative":"code/interview/面试总结.md","excerpt":"\\n<p>中电金信</p>\\n<ol>\\n<li>class 的 hooks 的区别</li>\\n</ol>\\n<ul>\\n<li>\\n<p>概念与定义方式</p>\\n<p>Class 组件:\\n使用 ES6 类语法定义组件，继承自 React.Component。\\n必须实现 render 方法来返回 JSX。</p>\\n<p>函数组件:\\n使用普通的 JavaScript 函数定义组件。\\n函数直接返回 JSX，没有 render 方法。</p>\\n</li>\\n<li>\\n<p>状态管理\\nClass 组件:\\n使用 this.state 来管理状态。\\n通过 this.setState 来更新状态。</p>\\n<p>函数组件:\\n使用 useState Hook 来管理状态。\\n通过调用 setCount 来更新状态</p>\\n</li>\\n<li>\\n<p>生命周期方法 vs. Hooks\\nClass 组件:\\n使用生命周期方法如 componentDidMount、componentDidUpdate 和 componentWillUnmount 来管理组件的生命周期。</p>\\n<p>函数组件（使用 Hooks）:\\n使用 useEffect Hook 来管理组件的生命周期。</p>\\n</li>\\n<li>\\n<p>代码简洁性\\nClass 组件:\\n由于需要管理 this 关键字、构造函数、绑定方法等，代码相对冗长。\\n函数组件:\\n代码更加简洁，函数式编程风格，使得逻辑更易读和复用。</p>\\n</li>\\n</ul>"}');export{r as comp,d as data};
