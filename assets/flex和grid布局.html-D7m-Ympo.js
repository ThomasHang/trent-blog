import{_ as s}from"./flex-CcMPSLbL.js";import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as e}from"./app-Ba0Gw2Pi.js";const t={};function d(p,i){return e(),a("div",null,i[0]||(i[0]=[n('<h1 id="flex、grid-布局" tabindex="-1"><a class="header-anchor" href="#flex、grid-布局"><span>flex、grid 布局</span></a></h1><h3 id="flexbox" tabindex="-1"><a class="header-anchor" href="#flexbox"><span>Flexbox：</span></a></h3><ol><li><p><strong>基本概念：</strong></p><ul><li>主轴和交叉轴的概念</li><li>flex 容器和 flex 项目的概念 <img src="'+s+`" alt="flex" loading="lazy"> 在 flex 容器中默认存在两条轴，水平主轴(main axis) 和垂直的交叉轴(cross axis), 在容器中的每个单元块被称之为 flex item，每个项目占据的主轴空间为 (main size), 占据的交叉轴的空间为 (cross size)。 这里需要强调，不能先入为主认为宽度就是 main size，高度就是 cross size，这个还要取决于你主轴的方向，如果你垂直方向是主轴，那么项目的高度就是 main size。</li></ul></li><li><p><strong>Flex 容器属性：</strong></p><ul><li><code>display: flex;</code> 定义一个 Flex 容器</li><li><code>flex-direction</code> 控制主轴的方向</li><li><code>justify-content</code> 控制主轴上的对齐方式</li><li><code>align-items</code> 控制交叉轴上的对齐方式</li><li><code>flex-wrap</code> 控制项目是否换行</li></ul></li><li><p><strong>Flex 项目属性：</strong></p><ul><li><code>flex</code> 设置项目的放大比例</li><li><code>order</code> 设置项目的排列顺序</li><li><code>align-self</code> 控制单个项目在交叉轴上的对齐方式</li></ul></li><li><p><strong>其他：</strong></p><ul><li>Flexbox 的响应式设计</li><li>Flexbox 和 Grid 的结合使用</li></ul></li></ol><p>::: vue-playground Vue 交互演示</p><p>@file App.vue</p><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-vue"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vue&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// const msg = ref(&quot;Hello World!&quot;);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;flex-box&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;1&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;2&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;3&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;4&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.flex-box</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   display:</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">flex</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><h3 id="grid" tabindex="-1"><a class="header-anchor" href="#grid"><span>Grid：</span></a></h3><ol><li><p><strong>基本概念：</strong></p><ul><li>网格容器和网格项的概念</li></ul></li><li><p><strong>网格容器属性：</strong></p><ul><li><code>display: grid;</code> 定义一个 Grid 容器</li><li><code>grid-template-columns</code> 和 <code>grid-template-rows</code> 定义网格列和行的大小</li><li><code>grid-template-areas</code> 定义网格区域</li><li><code>grid-gap</code> 定义网格项之间的间隔</li></ul></li><li><p><strong>网格项属性：</strong></p><ul><li><code>grid-column</code> 和 <code>grid-row</code> 定义网格项所占的列和行</li><li><code>grid-area</code> 定义网格项的区域名称</li><li><code>justify-self</code> 和 <code>align-self</code> 控制单个网格项在网格中的对齐方式</li></ul></li><li><p><strong>其他：</strong></p><ul><li>自适应网格布局</li><li>Grid 的自动布局算法</li></ul></li></ol><h3 id="练习和实践" tabindex="-1"><a class="header-anchor" href="#练习和实践"><span>练习和实践：</span></a></h3><ol><li>创建一个使用 Flexbox 的简单布局，包括主轴和交叉轴的设置。</li><li>创建一个使用 Grid 的网格布局，包括定义列和行。</li><li>尝试使用 Flexbox 和 Grid 结合，实现更复杂的布局。</li></ol><p>通过实际的代码练习，你将更好地理解 Flexbox 和 Grid 的用法，并能在面试时更自信地回答相关问题。</p>`,12)]))}const o=l(t,[["render",d]]),c=JSON.parse('{"path":"/code/website/css/flex%E5%92%8Cgrid%E5%B8%83%E5%B1%80.html","title":"flex、grid 布局","lang":"zh-CN","frontmatter":{},"git":{"createdTime":1699868401000,"updatedTime":1727509168000,"contributors":[{"name":"储天航","username":"","email":"1193983801@qq.com","commits":3},{"name":"ThomasHang","username":"ThomasHang","email":"11939838031@qq.com","commits":1,"url":"https://github.com/ThomasHang"}]},"readingTime":{"minutes":1.93,"words":578},"filePathRelative":"code/website/css/flex和grid布局.md","excerpt":"\\n<h3>Flexbox：</h3>\\n<ol>\\n<li>\\n<p><strong>基本概念：</strong></p>\\n<ul>\\n<li>主轴和交叉轴的概念</li>\\n<li>flex 容器和 flex 项目的概念\\n<img src=\\"/assets/images/learn/flex.png\\" alt=\\"flex\\" loading=\\"lazy\\">\\n在 flex 容器中默认存在两条轴，水平主轴(main axis) 和垂直的交叉轴(cross axis),\\n在容器中的每个单元块被称之为 flex item，每个项目占据的主轴空间为 (main size), 占据的交叉轴的空间为 (cross size)。\\n这里需要强调，不能先入为主认为宽度就是 main size，高度就是 cross size，这个还要取决于你主轴的方向，如果你垂直方向是主轴，那么项目的高度就是 main size。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>Flex 容器属性：</strong></p>\\n<ul>\\n<li><code>display: flex;</code> 定义一个 Flex 容器</li>\\n<li><code>flex-direction</code> 控制主轴的方向</li>\\n<li><code>justify-content</code> 控制主轴上的对齐方式</li>\\n<li><code>align-items</code> 控制交叉轴上的对齐方式</li>\\n<li><code>flex-wrap</code> 控制项目是否换行</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>Flex 项目属性：</strong></p>\\n<ul>\\n<li><code>flex</code> 设置项目的放大比例</li>\\n<li><code>order</code> 设置项目的排列顺序</li>\\n<li><code>align-self</code> 控制单个项目在交叉轴上的对齐方式</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>其他：</strong></p>\\n<ul>\\n<li>Flexbox 的响应式设计</li>\\n<li>Flexbox 和 Grid 的结合使用</li>\\n</ul>\\n</li>\\n</ol>"}');export{o as comp,c as data};
