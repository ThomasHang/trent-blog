import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as l}from"./app-Ba0Gw2Pi.js";const h={};function t(e,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>在某些特定业务场景中，需要通过浏览器触发并打开本地的 EXE 应用程序。实现这一功能通常需要借助协议注册和注册表操作。</p><hr><h2 id="实现步骤" tabindex="-1"><a class="header-anchor" href="#实现步骤"><span>实现步骤</span></a></h2><h3 id="_1-注册自定义协议" tabindex="-1"><a class="header-anchor" href="#_1-注册自定义协议"><span>1. 注册自定义协议</span></a></h3><p>通过操作注册表，为目标 EXE 应用注册一个自定义协议。例如，注册一个 <code>openw://</code> 协议，以便浏览器调用该协议时触发对应的应用。</p><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><ul><li>自定义协议的名称：<code>openw://</code></li><li>目标 EXE 应用路径：<code>C:\\Program Files\\MyApp\\myapp.exe</code></li></ul><p>以下是在 Windows 系统中操作注册表的步骤：</p><ol><li>打开注册表编辑器（<code>regedit</code>）。</li><li>在 <code>HKEY_CLASSES_ROOT</code> 下新建一个键值，例如 <code>openw</code>。</li><li>设置以下内容： <ul><li>默认值：协议描述（如 <code>URL:MyApp Protocol</code>）</li><li>增加字符串值 <code>URL Protocol</code>，其值为空。</li></ul></li><li>在 <code>shell\\open\\command</code> 中设置默认值为 EXE 的完整路径，例如：</li></ol><blockquote><p><strong>注意</strong>：编辑注册表存在风险，请提前备份重要数据。</p></blockquote><hr><h3 id="_2-前端实现调用自定义协议" tabindex="-1"><a class="header-anchor" href="#_2-前端实现调用自定义协议"><span>2. 前端实现调用自定义协议</span></a></h3><p>以下是一个 React 组件的示例代码，通过点击图标触发自定义协议调用：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-jsx"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> React</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;react&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Icon</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;antd&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> styles</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;./index.less&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> OpenApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> handleClick</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 调用自定义协议</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">href</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;openw://&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> className</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">styles</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">container</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> className</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">styles</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">icon_container</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Icon</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">       type</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;appstore&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 图标类型</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">       className</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">styles</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">icon</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">       onClick</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">handleClick</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-注意事项" tabindex="-1"><a class="header-anchor" href="#_3-注意事项"><span>3. 注意事项</span></a></h3><ol><li><p><strong>权限问题</strong></p><ul><li>注册表修改通常需要管理员权限。</li><li>用户必须在本地安装目标 EXE 应用并确保路径正确。</li></ul></li><li><p><strong>浏览器兼容性</strong></p><ul><li>不同浏览器对自定义协议的支持可能有所不同。推荐使用常见现代浏览器（如 Chrome、Edge）。</li><li>某些浏览器可能会拦截协议调用，需提前告知用户调整设置。</li></ul></li><li><p><strong>安全性</strong></p><ul><li>自定义协议存在一定安全风险，例如被恶意应用利用。因此，应确保协议仅调用可信程序，并做好路径校验。</li></ul></li><li><p><strong>跨平台问题</strong></p><ul><li>此方案仅适用于 Windows 系统。对于其他操作系统（如 macOS 和 Linux），需寻找类似的实现方式。</li></ul></li></ol>`,17)]))}const d=s(h,[["render",t]]),r=JSON.parse('{"path":"/code/work/%E5%89%8D%E7%AB%AF%E7%BD%91%E9%A1%B5%E6%89%93%E5%BC%80%E7%94%B5%E8%84%91exe%E5%BA%94%E7%94%A8.html","title":"浏览器中打开本地 EXE 应用","lang":"zh-CN","frontmatter":{"title":"浏览器中打开本地 EXE 应用","tag":"work"},"git":{"createdTime":1710833793000,"updatedTime":1733823164000,"contributors":[{"name":"储天航","username":"","email":"1193983801@qq.com","commits":2}]},"readingTime":{"minutes":1.84,"words":551},"filePathRelative":"code/work/前端网页打开电脑exe应用.md","excerpt":"<h2>背景</h2>\\n<p>在某些特定业务场景中，需要通过浏览器触发并打开本地的 EXE 应用程序。实现这一功能通常需要借助协议注册和注册表操作。</p>\\n<hr>\\n<h2>实现步骤</h2>\\n<h3>1. 注册自定义协议</h3>\\n<p>通过操作注册表，为目标 EXE 应用注册一个自定义协议。例如，注册一个 <code>openw://</code> 协议，以便浏览器调用该协议时触发对应的应用。</p>\\n<h4>示例</h4>\\n<ul>\\n<li>自定义协议的名称：<code>openw://</code></li>\\n<li>目标 EXE 应用路径：<code>C:\\\\Program Files\\\\MyApp\\\\myapp.exe</code></li>\\n</ul>"}');export{d as comp,r as data};
